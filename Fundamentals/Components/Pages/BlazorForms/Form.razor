@page "/products"
<h3>Blazor Form</h3>
<EditForm Model="_product" OnValidSubmit="@SaveProduct">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="container">
        <div class="row">
            <div class="col-8 offset-2">
                @* PRODUCT NAME *@
                <div class="form-group">
                    <label for="name">Product name: </label>
                    <InputText id="name"
                               @bind-Value="_product.Name"
                               class="form-control"
                               placeholder="Enter the name of the product"/>
                </div>
                @* PRODUCT DESCRIPTION *@
                <div class="form-group">
                    <label for="description">Product description: </label>
                    <InputTextArea id="description"
                                   @bind-Value="_product.Description"
                                   class="form-control"
                                   placeholder="Enter the description of the product"/>
                </div>
                @* PRODUCT PRICE *@
                <div class="form-group">
                    <label for="price">Product price: </label>
                    <InputNumber id="price" @bind-Value="_product.Price" class="form-control" />
                </div>
                @* PRODUCT STOCK *@
                <div class="form-group">
                    <label for="stock">Product stock: </label>
                    <InputNumber id="stock" @bind-Value="_product.Stock" class="form-control" />
                </div>
                @* RELEASE DATE *@
                <div class="form-group">
                    <label for="date">Release date: </label>
                    <InputDate id="date" @bind-Value="_product.ReleaseDate" class="form-control" />
                </div>
                @* PRODUCT CATEGORY *@
                <div class="form-group">
                    <label for="category">Category: </label>
                    <select id="category" @onchange="HandleItemsDropDown" class="form-control">
                        @foreach (var item in items)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                    </select>
                </div>
                <div>
                    @if (subItems.Count > 0)
                    {
                        <label for="subcategory">Sub-Category: </label>
                        <select id="subcategory" @onchange="HandleSubItemsDropDown" class="form-control">
                        @foreach (var subitem in subItems)
                        {
                            <option value="@subitem.Key">@subitem.Value</option>
                        }
                        </select>
                    }
                </div>
                @* PRODUCT AVAILABILITY *@
                <div class="form-group">
                    <label for="available">Available: </label>
                    <InputCheckbox id="available" @bind-Value="_product.Available" />
                </div>
                @* PRODUCT IMAGE *@
                <div class="form-group">
                    <label for="image">Image URL: </label>
                    <InputText id="image"
                               @bind-Value="_product.ImageUrl"
                               class="form-control"
                               placeholder="Enter the image of the product"/>
                </div>
                @* UPLOAD FILE *@
                <div>
                    <label for="file">Upload File (image):</label>
                    <InputFile OnChange="UploadFile">
                        @if (!string.IsNullOrEmpty(_product.FileName))
                        {
                            
                        }
                    </InputFile>
                </div>
                @* SUBMIT *@
                <button type="submit" class="btn btn-primary mt-3">Save Product</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private Product _product = new();

    private void SaveProduct()
    {
        Console.WriteLine("Product save successfully!");
    }

    private IBrowserFile fileUp;
    
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        fileUp = e.File;
        var buffer = new Byte[fileUp.Size];
        await fileUp.OpenReadStream().ReadAsync(buffer);
        // save file simultaion
        _product.FileName = fileUp.Name;
    }

    /* CASCADE DROP DOWNS */
    // private CascadeSelector _cascadeSelector = new();
    private Dictionary<int, string> items = new();
    private Dictionary<int, string> subItems = new();

    public Form()
    {
        items.Add(1, "electronic");
        items.Add(2, "home");
        items.Add(3, "sports");
        items.Add(4, "beauty");
    }

    public void HandleItemsDropDown(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            _product.Selector1 = 0;
            _product.Selector2 = 0;
            subItems = new Dictionary<int, string>();
            StateHasChanged();
            return;
        }

        _product.Selector1 = int.Parse(e.Value.ToString());
        switch (_product.Selector1)
        {
            case 1:
                subItems = new Dictionary<int, string>();
                subItems.Add(1, "computers");
                subItems.Add(2, "mobiles");
                subItems.Add(3, "headphones");
                subItems.Add(4, "cameras");
                break;
                
            case 2:
                subItems = new Dictionary<int, string>();
                subItems.Add(5, "living room,");
                subItems.Add(6, "dining room");
                subItems.Add(7, "bathroom");
                subItems.Add(8, "beds");
                break;
                
            case 3:
                subItems = new Dictionary<int, string>();
                subItems.Add(9, "soccer");
                subItems.Add(10, "tenis");
                subItems.Add(11, "contact sports");
                subItems.Add(12, "volleyball");
                break;
                
            case 4:
                subItems = new Dictionary<int, string>();
                subItems.Add(13, "cosmetics");
                subItems.Add(14, "nails");
                subItems.Add(15, "hair products");
                subItems.Add(16, "creams and exfoliants");
                break;
            default:
                subItems = new Dictionary<int, string>();
                break;
        }
    }

    public void HandleSubItemsDropDown(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            return;
        }

        _product.Selector2 = int.Parse(e.Value.ToString());
    }
}



